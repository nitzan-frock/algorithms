
import java.util.ArrayList;
import java.util.Arrays;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nitzanf
 */
public class FastCollinearPoints {
    ArrayList<LineSegment> segments = new ArrayList<>();
    
    public FastCollinearPoints(Point[] points) {
        if (points == null) throw new IllegalArgumentException("Points cannot be empty.");
        Arrays.sort(points);
        for (int i = 1; i < points.length; i++){
            if (points[i].compareTo(points[i-1]) == 0) throw new IllegalArgumentException("No duplicate points.");
        }
//        for (int i = 0; i < points.length; i++){
//            System.out.println(points[i]);
//        }
        // sort the points by the slope they make with the p.
        Point[] pointsBySlope = Arrays.copyOf(points, points.length);
        
        for (int i = 0; i < points.length; i++){
            System.out.println("group: " + i);
            Point origin = points[i];
            
            // sort the points based on the slope from the origin.
            Arrays.sort(pointsBySlope, origin.slopeOrder());
            for (int k = 0; k < pointsBySlope.length; k++){
                System.out.println(pointsBySlope[k]);
            }
            double refSlope = origin.slopeTo(pointsBySlope[1]);
            Point endPoint = pointsBySlope[1];
            int pointsInSegment = 2; // count origin, ref point
            for (int j = 2; j < points.length; j++){
                Point nextPoint = pointsBySlope[j];
                double targetSlope = origin.slopeTo(nextPoint);
                // check if the reference is equal to the target, if it is not then
                // check if there are enough points (4 or more) with the same slope to create a segment.
                // Then move the reference to the target.
                
                System.out.println("origin "+origin+" compared to nextPoint "+nextPoint+": "+origin.compareTo(nextPoint));
                if (refSlope == targetSlope && origin.compareTo(nextPoint) == -1){
                    pointsInSegment++;
                    endPoint = nextPoint;
                } else {
                    if (pointsInSegment > 3){
                        System.out.println("# of points in segment: " + pointsInSegment);
                        LineSegment segment = new LineSegment(origin, endPoint);
                        segments.add(segment);
                        System.out.println(segment);
                        pointsInSegment = 0;
                        break;
                    }
                    refSlope = targetSlope;
                }
            }
        }
    }
    
    public int numberOfSegments(){
        return segments.size();
    }
    
    public LineSegment[] segments(){
        return segments.toArray(new LineSegment[segments.size()]);
    }
    
    public static void main(String[] args){
        Point[] points = new Point[8];
        points[0] = new Point(10000, 0);
        points[1] = new Point(0, 10000);
        points[2] = new Point(3000, 7000);
        points[3] = new Point(7000, 3000);
        points[4] = new Point(20000, 21000);
        points[5] = new Point(3000, 4000);
        points[6] = new Point(14000, 15000);
        points[7] = new Point(6000, 7000);
        FastCollinearPoints FCP = new FastCollinearPoints(points);
        
    }
}
